## Default values for spartan.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.
## The description for each parameter below will be defined in

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []

containerPort: 8080
containerName: ""

nameOverride: ""
fullnameOverride: ""
appNameLabel: ""

serviceAccount:
  create: false
  annotations: {}
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext: {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

service:
  annotations: {}
  type: ClusterIP
  port: 80
  protocol: TCP
  name: http

gcp:
  enabled: false
  frontendConfig: {}
  # redirectToHttps:
  #   responseCodeName: MOVED_PERMANENTLY_DEFAULT
  backendConfig: {}
  # sessionAffinity:
  #   affinityType: GENERATED_COOKIE
  #   affinityCookieTtlSec: 60
  # securityPolicyName: example-policy
  managedCertificate: {}
  # domains:
  #  - chart-example.local

ingress:
  enabled: false
  className: ""
  annotations: {}
  # kubernetes.io/ingress.class: gce
  # kubernetes.io/ingress.global-static-ip-name: example-gcp-ip-address
  # hosts specifies ingress resource hostnames
  hosts: {}
  # - host: chart-example.local
  #   paths:
  #   - path: /
  #     pathType: ImplementationSpecific

gatewayApi:
  enabled: false
  # gatewayName: external-gateway
  # namespace: gateway-api
  # httpRoute:
  #   hostnames:
  #   - chart-example.com
  #   rules:
  #   - matches:
  #     - path:
  #         value: /
  # healthCheckPolicy:
  #   config:
  #     type: HTTP
  #     httpHealthCheck:
  #       requestPath: /api/v1/health

livenessProbe: {}
# httpGet:
#   path: /health
#   port: 80
# initialDelaySeconds: 3
# timeoutSeconds: 3
# failureThreshold: 6
startupProbe: {}
# httpGet:
#   path: /health
#   port: 80
# initialDelaySeconds: 3
# timeoutSeconds: 3
# failureThreshold: 6
readinessProbe: {}
# httpGet:
#   path: /health
#   port: 80
# initialDelaySeconds: 3
# timeoutSeconds: 3
# failureThreshold: 6

resources: {}
## We usually recommend not to specify default resources and to leave this as a conscious
## choice for the user. This also increases chances charts run on environments with little
## resources, such as Minikube. If you do want to specify resources, uncomment the following
## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  metrics: []
  behavior: {}

vpa:
  enabled: false
  updateMode: "Auto"

nodeSelector: {}

tolerations: []

affinity: {}

testConnection:
  enabled: false

secret:
  asFile:
    enabled: false
    mountPath: "/data/config"
    data: {}
    # secret.txt: SECRET_FILE_AS_BASE64
  asEnv:
    enabled: false
    data: {}
    # SECRET_NAME: SECRET_NAME_AS_BASE64
  externalSecretEnv:
    enabled: false
    name: external-secret-env
  externalSecretFile:
    enabled: false
    name: external-secret-file
    mountPath: "/data/config"

configMap:
  asFile:
    enabled: false
    mountPath: "/data/config"
    data: {}
    # nginx.conf: |
    #   server {
    #       location / {
    #           root /data/www;
    #       }
    #       location /images/ {
    #           root /data;
    #       }
    #   }
  asEnv:
    enabled: false
    data: {}
  externalConfigMapEnv:
    enabled: false
    name: external-config-map-env
  externalConfigMapFile:
    enabled: false
    name: external-config-map-file
    mountPath: "/data/config"

extraEnvs: []
#  - name: SERVICE
#    value: spartan
#  - name: VERSION
#    value: 1.0.0

workers: []
  # - name: worker-1
  #   shell: /bin/bash
  #   command: "echo worker-1"
  #   replicaCount: 1
  #   terminationGracePeriodSeconds: 180
  #   resources: {}
  #   customImage:
  #     enabled: false
  #     image: busybox
  #   podAnnotations: {}
  #   autoscaling:
  #     enabled: true
  #     minReplicas: 2
  #     maxReplicas: 10
  #     targetCPUUtilizationPercentage: 80
  #     targetMemoryUtilizationPercentage: 80
  #   extraEnvs: 
  #     - name: SERVICE
  #       value: worker

hooks:
  # - name: "ls"
  #   hookTypes: "post-install,post-upgrade"
  #   hookWeight: 0
  #   shell: /bin/bash
  #   commands:
  #     - ls -la
  #   resources: {}
  #   customImage:
  #     enabled: false
  #     image: busybox
  #   podAnnotations: {}
  #   restartPolicy: Never
  #   backoffLimit: 0
  #   extraEnvs: 
  #   - name: SERVICE
  #     value: hook

cronjobs: []
  # - name: "cleanup"
  #   schedule: "0 * * * *"
  #   shell: /bin/bash
  #   commands:
  #     - ls -la
  #   resources: {}
  #   customImage:
  #     enabled: true
  #     image: busybox
  #   podAnnotations: {}
  #   restartPolicy: Never
  #   extraEnvs: 
  #   - name: SERVICE
  #     value: cronjob

sidecars: []
  # - name: datadog-agent
  #   image: datadog/agent
  #   ports:
  #     - containerPort: 8125
  #       name: dogstatsdport
  #       protocol: UDP
  #     - containerPort: 8126
  #       name: traceport
  #       protocol: TCP
  #   sharedVolume:
  #     mountPath: /var/log/application/
  #   extraEnvs:
  #     - name: SERVICE
  #       value: sidecar
  # - name: busybox
  #   image: busybox
  #   ports:
  #     - containerPort: 80
  #       name: http
  #   resources:
  #     requests:
  #       memory: 100Mi
  #       cpu: 10m
  #     limits:
  #       memory: 100Mi
  #       cpu: 10m
  #   shell: /bin/bash
  #   command: "echo $(date) INFO hello >> /tmp/data/myapp.log && sleep 3"

## This field supports the datadog agent as sidecar pattern
## It will add additional environment variables for datadog
## It will also add stop condition for datadog agent container
datadog:
  enabled: false

## StrategyType configuration
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## Can be set to RollingUpdate or OnDelete
##
## type: RollingUpdate
## rollingUpdate:
##   maxSurge: 25%
##   maxUnavailable: 25%
updateStrategy: {}

## Pod Disruption Budget configuration
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
## @param pdb.enabled Enable/disable a Pod Disruption Budget creation
## @param pdb.minAvailable Minimum number/percentage of pods that should remain scheduled
## @param pdb.maxUnavailable Maximum number/percentage of pods that may be made unavailable
##
pdb:
  enabled: false
  ## ONLY 1 between minAvailable or maxUnavailable should be defined at the same time
  minAvailable: 1
  maxUnavailable: ""
