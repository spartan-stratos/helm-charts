---
# Source: spartan/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: __SERVICE_NAME__
  annotations:
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
---
# Source: spartan/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: __SERVICE_NAME__
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
    tier: "application"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spartan
      app.kubernetes.io/instance: test
  template:
    metadata:
      annotations:
        ad.datadoghq.com/__SERVICE_NAME__.check_names: '["__SERVICE_NAME__"]'
        ad.datadoghq.com/__SERVICE_NAME__.init_configs: '[{}]'
        ad.datadoghq.com/__SERVICE_NAME__.instances: |
          [
            {
              "host": "%%host%%",
              "port": "8080"
            }
          ]
        ad.datadoghq.com/__SERVICE_NAME__.logs: |
          [{
            "type": "file",
            "path": "/var/log/application/app.log",
            "source": "eks-cluster",
            "service": "__SERVICE_NAME__",
            "env": "__ENVIRONMENT__",
            "auto_multi_line_detection": true,
            "tags": [
              "env:__ENVIRONMENT__"
            ]
          }]
      labels:
        app.kubernetes.io/name: spartan
        app.kubernetes.io/instance: test
        tier: "application"
    spec:
      serviceAccountName: __SERVICE_NAME__
      securityContext:
        {}
      shareProcessNamespace: true
      containers:
        - name: __SERVICE_NAME__
          securityContext:
            {}
          image: "__DOCKER_REPO__:__IMAGE_TAG__"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 950m
              memory: 4Gi
            requests:
              cpu: 950m
              memory: 4Gi
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          volumeMounts:
            - name: sidecar-volume
              readOnly: false
              mountPath: /var/log/application/
              subPath: datadog-agent
            - name: home-pvc-volume
              mountPath: /data
                
        - name: datadog-agent
          image: public.ecr.aws/datadog/agent:latest
          imagePullPolicy: "Always"
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          ports:
            - containerPort: 8125
              name: dogstatsdport
              protocol: UDP
            - containerPort: 8126
              name: traceport
              protocol: TCP
          resources:
            limits:
              cpu: 50m
              memory: 0.25Gi
            requests:
              cpu: 50m
              memory: 0.25Gi
          volumeMounts:
            - mountPath: "/var/log/application/"
              name: sidecar-volume
              subPath: "datadog-agent"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - api-application
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: sidecar-volume
          emptyDir: {}
---
# Source: spartan/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: __SERVICE_NAME__
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: __SERVICE_NAME__
  minReplicas: 2
  maxReplicas: 4
  metrics:
    # DEPRECATED: The following metrics configuration is deprecated.
    # Use the `metrics` section defined below instead.
    # metrics:
    #   - type: Resource
    #     resource:
    #       name: cpu
    #       target:
    #         type: Utilization
    #         averageUtilization: 70
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    - resource:
        name: cpu
        target:
          averageUtilization: 200
          type: Utilization
      type: Resource
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 50
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
      - periodSeconds: 120
        type: Percent
        value: 100
      stabilizationWindowSeconds: 600
---
# Source: spartan/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: __SERVICE_NAME__
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/group.name: external
    alb.ingress.kubernetes.io/healthcheck-path: /health/
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
spec:
  ingressClassName: alb
  rules:
    - host: "api-application.app.approvia.dev"
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: __SERVICE_NAME__
                port:
                  number: 80
---
# Source: spartan/templates/hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: __SERVICE_NAME__-hook-migration
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
    tier: "hook"
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": keep
spec:
  backoffLimit: 0
  template:
    metadata:
      annotations:
        ad.datadoghq.com/__SERVICE_NAME__-migration.logs: |
          [{
            "type": "file",
            "path": "/var/log/application/migration.log",
            "source": "eks-cluster",
            "service": "__SERVICE_NAME__-migration",
            "env": "__ENVIRONMENT__",
            "auto_multi_line_detection": true,
            "tags": [
              "env:__ENVIRONMENT__"
            ]
          }]
      labels:
        app.kubernetes.io/name: spartan-hook
        app.kubernetes.io/instance: test-hook
        tier: "hook"
    spec:
      serviceAccountName: __SERVICE_NAME__
      securityContext:
        {}
      restartPolicy: Never
      shareProcessNamespace: true
      containers:
        - name: __SERVICE_NAME__
          securityContext:
            {}
          image: __DOCKER_REPO__:__DB_MIGRATION_IMAGE_TAG__
          imagePullPolicy: Always
          command:
            - /bin/bash
            - -c
            - |
              trap 'sleep 10 && pkill agent' EXIT
              set -o pipefail
              if [ ! `which curl` ]; then sleep 300; else while ! curl -Ns localhost:8126; do sleep 1 && echo "Waiting for datadog agent to start...."; done; fi
              /flyway/flyway migrate 2>&1 | tee -a /var/log/application/migration.log
          resources:
            null
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          volumeMounts:
            - name: sidecar-volume
              readOnly: false
              mountPath: /var/log/application/
              subPath: datadog-agent
                    
        - name: datadog-agent
          image: public.ecr.aws/datadog/agent:latest
          imagePullPolicy: "Always"
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          ports:
            - containerPort: 8125
              name: dogstatsdport
              protocol: UDP
            - containerPort: 8126
              name: traceport
              protocol: TCP
          resources:
            limits:
              cpu: 50m
              memory: 0.25Gi
            requests:
              cpu: 50m
              memory: 0.25Gi
          volumeMounts:
            - mountPath: "/var/log/application/"
              name: sidecar-volume
              subPath: "datadog-agent"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - api-application
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: sidecar-volume
          emptyDir: {}
---
# Source: spartan/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: __SERVICE_NAME__
  annotations:
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
---
# Source: spartan/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: __SERVICE_NAME__
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
    tier: "application"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: spartan
      app.kubernetes.io/instance: test
  template:
    metadata:
      annotations:
        ad.datadoghq.com/__SERVICE_NAME__.check_names: '["__SERVICE_NAME__"]'
        ad.datadoghq.com/__SERVICE_NAME__.init_configs: '[{}]'
        ad.datadoghq.com/__SERVICE_NAME__.instances: |
          [
            {
              "host": "%%host%%",
              "port": "8080"
            }
          ]
        ad.datadoghq.com/__SERVICE_NAME__.logs: |
          [{
            "type": "file",
            "path": "/var/log/application/app.log",
            "source": "eks-cluster",
            "service": "__SERVICE_NAME__",
            "env": "__ENVIRONMENT__",
            "auto_multi_line_detection": true,
            "tags": [
              "env:__ENVIRONMENT__"
            ]
          }]
      labels:
        app.kubernetes.io/name: spartan
        app.kubernetes.io/instance: test
        tier: "application"
    spec:
      serviceAccountName: __SERVICE_NAME__
      securityContext:
        {}
      shareProcessNamespace: true
      containers:
        - name: __SERVICE_NAME__
          securityContext:
            {}
          image: "__DOCKER_REPO__:__IMAGE_TAG__"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 950m
              memory: 4Gi
            requests:
              cpu: 950m
              memory: 4Gi
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          volumeMounts:
            - name: sidecar-volume
              readOnly: false
              mountPath: /var/log/application/
              subPath: datadog-agent
            - name: home-pvc-volume
              mountPath: /data
                
        - name: datadog-agent
          image: public.ecr.aws/datadog/agent:latest
          imagePullPolicy: "Always"
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          ports:
            - containerPort: 8125
              name: dogstatsdport
              protocol: UDP
            - containerPort: 8126
              name: traceport
              protocol: TCP
          resources:
            limits:
              cpu: 50m
              memory: 0.25Gi
            requests:
              cpu: 50m
              memory: 0.25Gi
          volumeMounts:
            - mountPath: "/var/log/application/"
              name: sidecar-volume
              subPath: "datadog-agent"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - api-application
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: sidecar-volume
          emptyDir: {}
        - name: home-pvc-volume
          persistentVolumeClaim:
            claimName: home-pvc
---
# Source: spartan/templates/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: __SERVICE_NAME__
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: __SERVICE_NAME__
  minReplicas: 2
  maxReplicas: 4
  metrics:
    # DEPRECATED: The following metrics configuration is deprecated.
    # Use the `metrics` section defined below instead.
    # metrics:
    #   - type: Resource
    #     resource:
    #       name: cpu
    #       target:
    #         type: Utilization
    #         averageUtilization: 70
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
    - resource:
        name: cpu
        target:
          averageUtilization: 200
          type: Utilization
      type: Resource
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 50
      stabilizationWindowSeconds: 300
    scaleUp:
      policies:
      - periodSeconds: 120
        type: Percent
        value: 100
      stabilizationWindowSeconds: 600
---
# Source: spartan/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: __SERVICE_NAME__
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/group.name: external
    alb.ingress.kubernetes.io/healthcheck-path: /health/
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    kubernetes.io/ingress.class: alb
spec:
  ingressClassName: alb
  rules:
    - host: "api-application.app.approvia.dev"
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: __SERVICE_NAME__
                port:
                  number: 80
---
# Source: spartan/templates/hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: __SERVICE_NAME__-hook-migration
  labels:
    helm.sh/chart: spartan-0.1.11
    app.kubernetes.io/name: spartan
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.1.11"
    app.kubernetes.io/managed-by: Helm
    tier: "hook"
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "0"
    "helm.sh/resource-policy": keep
spec:
  backoffLimit: 0
  template:
    metadata:
      annotations:
        ad.datadoghq.com/__SERVICE_NAME__-migration.logs: |
          [{
            "type": "file",
            "path": "/var/log/application/migration.log",
            "source": "eks-cluster",
            "service": "__SERVICE_NAME__-migration",
            "env": "__ENVIRONMENT__",
            "auto_multi_line_detection": true,
            "tags": [
              "env:__ENVIRONMENT__"
            ]
          }]
      labels:
        app.kubernetes.io/name: spartan-hook
        app.kubernetes.io/instance: test-hook
        tier: "hook"
    spec:
      serviceAccountName: __SERVICE_NAME__
      securityContext:
        {}
      restartPolicy: Never
      shareProcessNamespace: true
      containers:
        - name: __SERVICE_NAME__
          securityContext:
            {}
          image: __DOCKER_REPO__:__DB_MIGRATION_IMAGE_TAG__
          imagePullPolicy: Always
          command:
            - /bin/bash
            - -c
            - |
              trap 'sleep 10 && pkill agent' EXIT
              set -o pipefail
              if [ ! `which curl` ]; then sleep 300; else while ! curl -Ns localhost:8126; do sleep 1 && echo "Waiting for datadog agent to start...."; done; fi
              /flyway/flyway migrate 2>&1 | tee -a /var/log/application/migration.log
          resources:
            null
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          volumeMounts:
            - name: sidecar-volume
              readOnly: false
              mountPath: /var/log/application/
              subPath: datadog-agent
                    
        - name: datadog-agent
          image: public.ecr.aws/datadog/agent:latest
          imagePullPolicy: "Always"
          envFrom:
            - secretRef:
                name: __SERVICE_NAME__-env-var
            - configMapRef:
                name: __SERVICE_NAME__-config-map
          env:
            - name: DD_KUBERNETES_KUBELET_NODENAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_ORCHESTRATOR_EXPLORER_ENABLED
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_CLUSTER_AGENT_ENABLED
              value: "true"
            - name: ENVIRONMENT
              value: __ENVIRONMENT__
            - name: DD_CLUSTER_AGENT_URL
              value: https://datadog-cluster-agent.datadog:5005
            - name: DD_EKS_FARGATE
              value: "true"
            - name: DD_ENV
              value: __ENVIRONMENT__
            - name: DD_SERVICE
              value: __SERVICE_NAME__
            - name: DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL
              value: "true"
            - name: DD_LOGS_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_PROCESS_AGENT_ENABLED
              value: "true"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_APM_FILTER_TAGS_REJECT
              value: http.route:/api/v1/health
            - name: LOG_FILE
              value: /var/log/application/app.log
          ports:
            - containerPort: 8125
              name: dogstatsdport
              protocol: UDP
            - containerPort: 8126
              name: traceport
              protocol: TCP
          resources:
            limits:
              cpu: 50m
              memory: 0.25Gi
            requests:
              cpu: 50m
              memory: 0.25Gi
          volumeMounts:
            - mountPath: "/var/log/application/"
              name: sidecar-volume
              subPath: "datadog-agent"
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - api-application
            topologyKey: kubernetes.io/hostname
      volumes:
        - name: sidecar-volume
          emptyDir: {}
